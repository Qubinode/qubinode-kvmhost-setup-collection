name: CI/CD Pipeline

on:
  push:
    branches: [ main, stable-* ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * *'

concurrency:
  group: >-
    ${{ github.workflow }}-${{
      github.event.pull_request.number || github.sha
    }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run ansible-lint
        uses: ansible/ansible-lint-action@main
        with:
          path: "roles/"
          exclude_paths: "roles/.cache/,roles/.venv/"

  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ansible-version: ['2.13', '2.14', '2.15']
        python-version: ['3.9', '3.10', '3.11']
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core==${{ matrix.ansible-version }} molecule molecule-docker pytest-testinfra
      - name: Run Molecule tests
        run: molecule test
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'

  integration:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ansible-version: ['2.13', '2.14', '2.15']
    steps:
      - uses: actions/checkout@v3
      - name: Build test container
        run: docker build -t kvmhost-test -f Dockerfile .
      - name: Run integration tests
        run: |
          docker run --privileged \
            -v ${PWD}:/ansible \
            kvmhost-test \
            ansible-playbook tests/integration.yml \
            -e ansible_version=${{ matrix.ansible-version }}

  version-monitoring:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Check for new Ansible versions
        run: |
          pip install packaging
          python -c "from packaging import version
          import requests
          latest = version.parse(requests.get('https://pypi.org/pypi/ansible/json').json()['info']['version'])
          current = version.parse('2.13')  # Use 2.13 as baseline
          if latest > current:
              print(f'New Ansible version available: {latest}')
              exit(1)
          else:
              print('Using latest version')"
        continue-on-error: true

  release:
    needs: [test, integration, version-monitoring]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
