name: CI/CD Pipeline

on:
  push:
    branches: [ main, stable-* ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * *'

concurrency:
  group: >-
    ${{ github.workflow }}-${{
      github.event.pull_request.number || github.sha
    }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible-lint molecule-podman
      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman
      - name: Run ansible-lint
        uses: ansible/ansible-lint-action@main
        with:
          path: "roles/"
          exclude_paths: "roles/.cache/,roles/.venv/"

  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ansible-version: ['2.13', '2.14', '2.15']
        python-version: ['3.9', '3.10', '3.11']
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core==${{ matrix.ansible-version }} molecule molecule-podman pytest-testinfra
          # Install collections with proper error handling
          ansible-galaxy collection install -r roles/kvmhost_setup/collection/requirements.yml -vv || {
            echo "Retrying collection installation with force..."
            ansible-galaxy collection install -r roles/kvmhost_setup/collection/requirements.yml -vv --force
          }
          # Verify installations
          ansible-galaxy collection list
          ansible --version
      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman slirp4netns
          sudo mkdir -p /etc/containers
          echo -e '[registries.search]\nregistries = ["docker.io", "quay.io"]' | sudo tee /etc/containers/registries.conf
          echo -e '[engine]\nevents_logger = "file"\ncgroup_manager = "cgroupfs"' | sudo tee /etc/containers/containers.conf
      - name: Pull CentOS Stream 9 image
        run: |
          podman pull quay.io/centos/centos:stream9
      - name: Run Molecule tests
        timeout-minutes: 45
        run: |
          molecule test --destroy=never
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          MOLECULE_DEBUG: 'true'
          ANSIBLE_VERBOSITY: '2'

  integration:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ansible-version: ['2.13', '2.14', '2.15']
    steps:
      - uses: actions/checkout@v3
      - name: Build test container
        run: |
          podman build \
            --build-arg ANSIBLE_VERSION=${{ matrix.ansible-version }} \
            -t kvmhost-test -f Dockerfile .
      - name: Run integration tests
        run: |
          podman run --privileged \
            -v ${PWD}:/ansible:Z \
            -e ANSIBLE_VERBOSITY=2 \
            kvmhost-test \
            ansible-playbook tests/integration.yml \
            -e ansible_version=${{ matrix.ansible-version }} \
            -e cicd_test=true

  version-monitoring:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Check for new Ansible versions
        run: |
          pip install packaging
          python -c "from packaging import version
          import requests
          latest = version.parse(requests.get('https://pypi.org/pypi/ansible/json').json()['info']['version'])
          current = version.parse('2.13')  # Use 2.13 as baseline
          if latest > current:
              print(f'New Ansible version available: {latest}')
              exit(1)
          else:
              print('Using latest version')"
        continue-on-error: true

  security:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
      
      - name: Run Bandit security check
        run: |
          pip install bandit
          bandit -r roles/ -f txt -ll
          
  release:
    needs: [test, integration, version-monitoring, security]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.0.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            LICENSE
            README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
